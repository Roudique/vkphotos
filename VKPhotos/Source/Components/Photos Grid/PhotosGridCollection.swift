//
//  PhotosGridCollection.swift
//  VKPhotos
//
//  Created by Yury Smidovich on 21/02/2018.
//  Copyright ¬© 2018 Yury Smidovich. All rights reserved.
//

import UIKit
import DeepDiff
import Kingfisher

protocol PhotosGridDelegate: class {
    func tapVKPhoto(inCell cell: PhotosGridCell, atIndex: Int)
    func onScrollEndReached()
    func onRefresh()

    func selectVKPhoto(_ vkPhoto: VKPhoto, _ result: ((Bool) -> Void))
    func deselectVKPhoto(_ vkPhoto: VKPhoto, _ result: ((Bool) -> Void))
    func isVKPhotoSelected(_ vkPhoto: VKPhoto) -> Bool
}

class PhotosGridCollection: InfinityGrid {
    deinit {
        print("[üí£] PhotosGridCollection")
    }

    private let FooterReusableViewID = "PhotosGridFooterReusableView"
    private let HeaderUploadPhotoViewID = "PhotosGridUploadPhotoHeader"

    fileprivate let FooterHeight = CGFloat(60)

    override var onEndReachedThreshold: CGFloat { return 350 + FooterHeight }
    private weak var photosGridDelegate: PhotosGridDelegate?

    // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∫–∏
    // –ï—Å–ª–∏ true –∑–Ω–∞—á–∏—Ç —Å–µ—Ç–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è
    private var isReloading = false

    private(set) var vkPhotos = [VKPhoto]()
    private(set) var itemsPerRow: Int = 4
    private(set) var isSelectable = false

    lazy var footer: InfinityGridFooter = { return .fromNib() }()

    func setup(_ photosGridDelegate: PhotosGridDelegate, _ itemsPerRow: Int? = nil) {
        register(UINib(nibName: "PhotosGridCell", bundle: nil), forCellWithReuseIdentifier: PhotosGridCellId)
        register(UICollectionReusableView.self, forSupplementaryViewOfKind: UICollectionElementKindSectionFooter, withReuseIdentifier: FooterReusableViewID)

        delegate = self
        dataSource = self
        prefetchDataSource = self
        self.photosGridDelegate = photosGridDelegate

        if let itemsPerRow = itemsPerRow {
            self.itemsPerRow = itemsPerRow
        }
    }

    func toggleIsSelectable(to value: Bool) {
        isSelectable = value

        if !isReloading {
            // –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?
            // –ö–æ–≥–¥–∞ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≤ —Å–µ—Ç–∫–µ, –º—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫–∏ –≤—ã–∑–≤–∞–≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å reloadData
            // –ù–æ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω reload, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç DeepDiff'a,
            // –≤ –∫–æ–Ω—Ü–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–∞–∫ –∏ —Ç–∞–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è reloadData.
            //
            // –ò –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –º—ã –≤—ã–∑–æ–≤–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –µ—â–µ –æ–¥–∏–Ω reloadData
            // - –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–ø–ª–æ—Ç—å –¥–æ –ø–∞–¥–µ–Ω–∏—è –∞–ø–ø–∫–∏
            reloadData()
        }
    }
}

// MARK: Data manipulation -
extension PhotosGridCollection {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –¥–∏—Ñ
    // –ù–æ –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ - reloadPhotos
    //
    // –ü–æ–º–Ω–∏ —á—Ç–æ @param photosToInsert –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å isDeleted = false
    func insertPhotos(_ photosToInsert: [VKPhoto], then completion: (() -> Void)? = nil) {
        // TODO: –ù—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–µ–π—Ç–µ –∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        let (start, end) = (vkPhotos.count, vkPhotos.count + photosToInsert.count)
        let indexPaths = (start..<end).map({ return IndexPath(row: $0, section: 0) })

        self.vkPhotos.append(contentsOf: photosToInsert)
        self.isReloading = true

        performBatchUpdates({ self.insertItems(at: indexPaths) }) { [weak self] _ in
            self?.isReloading = false
            print("üñº Photos: Did Insert - \(String(describing: self?.photosGridDelegate.self)))")
            completion?()
        }
    }

    // –ü–æ–º–Ω–∏ —á—Ç–æ @param newVKPhotos –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å isDeleted = false
    func reloadPhotos(with newVKPhotos: [VKPhoto], then completion: (() -> Void)? = nil) {
        let changes = diff(old: self.vkPhotos, new: newVKPhotos)

        self.vkPhotos = newVKPhotos
        self.isReloading = true

        reload(changes: changes, completion: { [weak self] _ in
            print("üñº Photos: Did Reload - \(String(describing: self?.photosGridDelegate.self)))")

            self?.reloadData()
            self?.isReloading = false

            completion?()
        })
    }
}

extension PhotosGridCollection: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return vkPhotos.count
    }

    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
//        case UICollectionElementKindSectionHeader:
//            let header = collectionView.dequeueReusableSupplementaryView(
//                ofKind: kind,
//                withReuseIdentifier: HeaderUploadPhotoViewID,
//                for: indexPath)
//
//            return header
        case UICollectionElementKindSectionFooter:
            let reusableFooter = collectionView.dequeueReusableSupplementaryView(
                ofKind: kind,
                withReuseIdentifier: FooterReusableViewID,
                for: indexPath)

            footer.frame.size = CGSize(width: collectionView.bounds.width, height: 60)
            reusableFooter.addSubview(footer)

            return reusableFooter
        default:
            assert(false, "Unexpected element kind")
        }

        fatalError("Cant find valid view") // TODO Check
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PhotosGridCellId, for: indexPath) as! PhotosGridCell

        guard indexPath.item >= 0 && indexPath.item < vkPhotos.count else {
            // TODO: –¢—É—Ç –ø–∞–¥–∞–µ—Ç –ø–æ index out of a range –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–æ–≥–æ –∞–ª—å–±–æ–º–∞ - —á—Ç–æ –∑–∞ —Ö–µ—Ä–Ω—è?
            // –ø—Ä–∏—à–ª–æ—Å—å –≤–æ—Ç–∫–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ —ç—Ç–æ —è–≤–Ω–æ –∫–æ—Å—è–∫ —Å –ø–∞—Ä–∞–ª–µ–ª–∏–∑–º–æ–º
            return cell
        }

        let vkPhoto = vkPhotos[indexPath.item]
        cell.setup(vkPhoto, isSelectable)
        cell.onCheckboxTap = { [weak self] isChecked in
            switch isChecked {
            case true:
                self?.photosGridDelegate?.selectVKPhoto(vkPhoto) { isSelected in
                    if !isSelected { cell.uncheck(false) }
                }
            case false:
                self?.photosGridDelegate?.deselectVKPhoto(vkPhoto) { isDeselected in
                    if !isDeselected { cell.check(false) }
                }
            }
        }

        if let delegate = photosGridDelegate, delegate.isVKPhotoSelected(vkPhoto) {
            cell.check(false)
        }

        return cell
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let cell = collectionView.cellForItem(at: indexPath) as? PhotosGridCell else { return }
        photosGridDelegate?.tapVKPhoto(inCell: cell, atIndex: indexPath.item)
    }
}

extension PhotosGridCollection: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: FooterHeight)
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let cellSpaceWidth: CGFloat = isDevicePlus() ? 6 : 3
        // TODO: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        let itemSize = floor((collectionView.bounds.width - cellSpaceWidth) / CGFloat(itemsPerRow))

        return CGSize(width: itemSize, height: itemSize)
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return isDevicePlus() ? 2 : 1
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return isDevicePlus() ? 2 : 1
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        let inset: CGFloat = isDevicePlus() ? 2 : 1
        return UIEdgeInsets(top: inset, left: 0, bottom: inset, right: 0)
    }
}

extension PhotosGridCollection: UICollectionViewDataSourcePrefetching {
    func collectionView(_ collectionView: UICollectionView, cancelPrefetchingForItemsAt indexPaths: [IndexPath]) {
        indexPaths.forEach { indexPath in
            if let cell = cellForItem(at: indexPath) as? PhotosGridCell {
                cell.imageView.kf.cancelDownloadTask()
            }
        }
    }

    func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
//        let imageUrlsToPrefetch = indexPaths.flatMap { indexPath -> URL? in
//            if let imageUrl = vkPhotos[indexPath.item].getVKSize(byType: "x")?.getUrl() {
//                return URL(string: imageUrl)
//            }
//
//            return nil
//        }
//
//        if !imageUrlsToPrefetch.isEmpty {
//            ImagePrefetcher(urls: imageUrlsToPrefetch).start()
//        }
    }
}
