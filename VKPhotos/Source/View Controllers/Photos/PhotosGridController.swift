//
// Created by Yury Smidovich on 17/03/2018.
// Copyright (c) 2018 Yury Smidovich. All rights reserved.
//

import UIKit
import DeepDiff
import Hydra
import Firebase

protocol PhotosGridControllerDelegate: class {
    func changeNavigationUI(tabBar tabBarView: UIView, navigationTitle navigationTitleView: UIView)
    func resetNavigationUI()
}

class PhotosGridController: UIViewController {
    let PHOTOS_PER_PAGE = 104

    // TODO: –§–ª–∞–≥ –æ–∑–Ω–∞—á–∞–µ—Ç - –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ—Ç–∫—É —Ñ–æ—Ç–æ–∫ –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
    // —Å–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–≥, –∫–æ–≥–¥–∞ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ —Ñ–æ—Ç–∫–∞—Ö
    // –µ—Å–ª–∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ò–∑–º. –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Å —Å–µ—Ç–∫–æ–π
    private var isCanStartSelect = false

    private(set) var isEditMode = false
    var photoManager: (PhotoManager & VKAPIManager)!

    var selectedVKPhotos = Set<VKPhoto>() {
        didSet {
            editTabBar.toggleButtonsAvailability()
            updateSelectedCounter()
        }
    }

    weak var parentController: PhotosGridControllerDelegate? // TODO: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    weak var photoGallery: SlideLeafViewController?
    weak var vkPhotoDetailView: VKPhotoDetailView?
    weak var photosGridCollection: PhotosGridCollection! {
        didSet {
            photosGridCollection.setup(self)
            photosGridCollection.scrollDelegate = self
            photosGridCollection.isShouldEndScrollReachingFire = { [weak self] _ in
                guard let this = self else { return false }

                return
                    // 1) –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, —Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥ –ø–æ—Ä—Ü–∏—é
                    this.photoManager.vkPhotos.count != 0 &&
                    // 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ–Ω—å—à–µ —á–µ–º totalCount
                    this.photoManager.vkPhotos.count < this.photoManager.totalCount
            }
        }
    }

    lazy var editBarButton: UIBarButtonItem = {
        let button = UIBarButtonItem(title: "Edit".localized(), style: .plain, target: self, action: #selector(onEditBarButtonTap))
        button.tintColor = .white
        return button
    }()

    lazy var selectedPhotosCounter: UILabel = {
        let label = UILabel()
        label.textAlignment = .center
        label.textColor = .white
        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        label.sizeToFit()
        return label
    }()

    lazy var editTabBar: PhotosListEditTabbar = {
        let tabBar: PhotosListEditTabbar = .fromNib()
        tabBar.delegate = self
        return tabBar
    }()

    @objc func onEditBarButtonTap(_ sender: UIBarButtonItem) {
        if !isCanStartSelect || photoManager.vkPhotos.isEmpty { return }
        changeEditMode()
    }

    @objc func onVKUserBlockEvents(_ notification: NSNotification) {
        photosGridCollection.reloadData()
        photoGallery?.collectionView.reloadData()
    }

    func createPhotoManager() -> (PhotoManager & VKAPIManager) {
        return VKPhotoManager(key: "all")
    }

    func photoGalleryDidOpen() {}

    func photoGalleryDidClosed() {
        vkPhotoDetailView = nil
    }

    func updateGridFromState(_ loadMissing: Bool = true, completion: (() -> Void)? = nil) {
        // –î–æ–±–æ—Ä —ç—Ç–æ –æ–ø–∞—Å–Ω–∞—è –∏ –Ω–µ –æ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —à—Ç—É–∫–∞
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ - –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –∏—â–∏ –ø—Ä–∏—á–∏–Ω—É —Ç—É—Ç üëá
        let loadMissingPhotos: (Int) -> Void = { [weak self] count in
            self?.photosGridCollection.isScrollEndReached = true
            self?.photoManager.getNextPhotos(count: count) { [weak self] result in
                switch result {

                case .success(let vkPhotos):
                    guard let this = self else { return }

                    this.photoGallery?.update(vkPhotos, from: this.photoManager.vkPhotos)
                    this.photosGridCollection.footer.hide(withAnim: false)

                    this.photosGridCollection.insertPhotos(vkPhotos) { [weak self] in
                        self?.photosGridCollection.isScrollEndReached = false
                        self?.showFooterMessageWithCounter()
                        completion?()
                    }

                case .failure:
                    self?.photosGridCollection.isScrollEndReached = false
                    completion?()
                }
            }
        }

        // TODO!!! –≠—Ç–æ –æ—á–µ–Ω—å —Å—Ç—Ä–µ–º–Ω–æ: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–æ –≥–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        let vkPhotos = photoManager.vkPhotos.filter({ !$0.isDeleted })
        photosGridCollection.reloadPhotos(with: vkPhotos) { [weak self] in
            self?.showFooterMessageWithCounter()

            guard let this = self, loadMissing else { completion?(); return }

            // –î–æ–±–æ—Ä
            let vkPhotosCount = this.photoManager.vkPhotos.count
            if vkPhotosCount < this.PHOTOS_PER_PAGE {
                // 1) –î–æ–≥—Ä—É–∂–∞–µ–º –¥–æ `PHOTOS_PER_PAGE`
                let missingCount = this.PHOTOS_PER_PAGE - vkPhotosCount
                if missingCount > 0 && vkPhotosCount < this.photoManager.totalCount {
                    loadMissingPhotos(missingCount)
                } else {
                    completion?()
                }
            } else {
                // 2) –î–æ–≥—Ä—É–∂–∞–µ–º –¥–æ "–∫—Ä–∞—Å–æ—Ç—ã"
                let currentCountInGrid = this.photosGridCollection.vkPhotos.count
                let rows = Float(currentCountInGrid) / Float(this.photosGridCollection.itemsPerRow)
                let missingCount = (Int(rows.rounded(.up)) * this.photosGridCollection.itemsPerRow) - currentCountInGrid

                guard missingCount > 0 else { completion?(); return }
                loadMissingPhotos(missingCount)
            }
        }
    }

    func onVKPhotosUpdate(_ updatedVKPhotos: [VKPhoto]) {
        // TODO: –î–∏–∑–µ–π–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤—ã–±–æ—Ä–∞) –µ—Å–ª–∏ —Ñ–æ—Ç–æ–∫ –Ω–µ—Ç
        //editBarButton.isEnabled = !photoManager.vkPhotos.isEmpty

        photoGallery?.update(updatedVKPhotos, from: photoManager.vkPhotos)
        updateGridFromState()
        cleanupSelectedVKPhotos()
    }

    func changeEditMode(to forceValue: Bool? = nil) {
        if let forceValue = forceValue, forceValue == isEditMode { return }
        isEditMode = forceValue != nil ? forceValue! : !isEditMode

        photosGridCollection.toggleIsSelectable(to: isEditMode)

        editBarButton.title = isEditMode ? "Cancel".localized() : "Edit".localized()
        editBarButton.style = isEditMode ? .done : .plain

        if isEditMode {
            updateSelectedCounter()
            parentController?.changeNavigationUI(tabBar: editTabBar, navigationTitle: selectedPhotosCounter)
        } else {
            parentController?.resetNavigationUI()
            editTabBar.removeFromSuperview()
            selectedVKPhotos.removeAll()
        }
    }

    func multipleMove() {
        // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∞–ª—å–±–æ–º–∞
    }

    func multipleDelete() {
        guard !selectedVKPhotos.isEmpty else { HUD.flash(.error, delay: 1.3); return }

        let title = "Delete".localized() + " \(selectedVKPhotos.count) " + "photos".localized()
        let deleteAction = UIAlertAction(title: title, style: .destructive) { [weak self] _ in
            guard let this = self else { return }
            var isShowingHUD = true

            let operation = this.photoManager.multiDelete(Array(this.selectedVKPhotos)) { [weak self] result in
                isShowingHUD = false
                self?.photoManager.cleanupState(nil)

                switch result {
                case .success:
                    self?.changeEditMode(to: false)
                    HUD.hide(animated: true)
                    StoreReviewHelper.checkAndAskForReview()
                case .failure(let error):
                    guard error != .cancelled else { return }
                    HUD.flash(.error, delay: 1.3)
                }

                // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç–∫—É —Å–∏–Ω–∫–æ–π –∏–ª–∏ –∏–∑ —Å—Ç–µ–π—Ç–∞?
            }

            Timer.scheduledTimer(withTimeInterval: 0.3, repeats: false) { _ in
                guard isShowingHUD, let operation = operation else { return }
                HUD.show(cancelHandler: { operation.cancel() })
            }

            Analytics.logEvent(AnalyticsEvent.PhotoMultiDelete, parameters: ["count": this.selectedVKPhotos.count])
        }

        let deleteActionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        deleteActionSheet.addAction(deleteAction)
        deleteActionSheet.addAction(UIAlertAction(title: "Cancel".localized(), style: .cancel))

        present(deleteActionSheet, animated: true)
    }

    fileprivate func updateSelectedCounter() {
        selectedPhotosCounter.text = "\(selectedVKPhotos.count) " + "of".localized() + " \(photoManager.totalCount)"
        selectedPhotosCounter.sizeToFit()
    }

    fileprivate func cleanupSelectedVKPhotos() {
        if isEditMode && photoManager.vkPhotos.isEmpty {
            // TODO: –ï—Å—Ç—å —á–µ—Ç–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ —á—Ç–æ —ç—Ç–æ –∑–¥–µ—Å—å –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
            changeEditMode(to: false)
        }

        if !selectedVKPhotos.isEmpty {
            selectedVKPhotos = selectedVKPhotos.filter({ photoManager.vkPhotos.contains($0) })
        }
    }

    fileprivate func showFooterMessageWithCounter() {
        let text = getTextForPhotosCount(count: photoManager.vkPhotos.count, totalCount: photoManager.totalCount)
        photosGridCollection.footer.stopLoading(text)
    }

    fileprivate func handleError(_ error: OperationError, _ popErrorMessage: String? = nil, _ footerErrorMessage: String? = nil) {
        var errorMessage = popErrorMessage ?? Messages.Errors.failToRefreshData
        if error == .noConnection {
            errorMessage = Messages.Errors.noInternetConnection
        }

        showErrorNotification(errorMessage)
        photosGridCollection.footer.stopLoading(footerErrorMessage ?? Messages.Errors.needToRefreshList)

        // TODO! –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"
    }

    fileprivate func getTextForPhotosCount(count: Int, totalCount: Int) -> String {
        var text: String = "No Photo".localized()

        if count > 0 {
            let index = count % 10 == 1 && count % 100 != 11
                ? 0
                : count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20) ? 1 : 2

            let photosPlural = ["one photo".localized(), "few photos".localized(), "many photos".localized()][index]
            text = "\(count) \(photosPlural)"

            if count < totalCount {
                text += " " + "of".localized() + " \(totalCount)"
            }
        }

        return text
    }

    fileprivate func prefetchPhotoInfo(for nextIndex: Int, with currentIndex: Int) {
        // TODO!! –û—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–µ –¥–∞–≤–∞—Ç—å –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–µ
        let photosCount = photoManager.vkPhotos.count
        var indices = 0 ... 1

        if nextIndex == currentIndex {
            // 1) –ú—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ, –æ—Ç–∫—Ä—ã–ª–∏ –≥–∞–ª–µ—Ä–µ—é, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ–¥–≥—Ä—É–∂–∞–µ–º 1 —Ñ–æ—Ç–∫—É –≤–ª–µ–≤–æ 1 –≤–ø—Ä–∞–≤–æ –∏ —Ç–µ–∫—É—â—É—é
            indices = nextIndex - 1 ... nextIndex + 1
        } else {
            // 2) –ú—ã –≤ –≥–∞–ª–µ—Ä–µ–µ –∏ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ, –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –¥–ª—è –µ–µ —Å–ª–µ–¥ 3 —Å–æ—Å–µ–¥—è—Ö
            indices = currentIndex < nextIndex
                ? nextIndex + 1...nextIndex + 3
                : nextIndex - 3...nextIndex - 1
        }

        let siblingIndex = currentIndex < nextIndex
            ? (nextIndex + 1 >= photosCount ? nextIndex : nextIndex + 1)
            : (nextIndex - 1 < 0 ? nextIndex : nextIndex - 1)

        guard // –ï—Å–ª–∏ –¥–ª—è —Ñ–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–Ω—É, –∏–Ω—Ñ–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥ –±–∞—Ç—á –∏–∑ 3—Ö (–∏–ª–∏ –º–µ–Ω–µ–µ)
            (nextIndex >= 0 && nextIndex < photosCount),
            photoManager.vkPhotos[siblingIndex].isInfoExist == false || nextIndex == currentIndex
            else { return }

        let idxsForUpdate = indices.filter({ $0 >= 0 && $0 < photosCount })
        let vkPhotosToUpdate = idxsForUpdate.compactMap { idx -> VKPhoto? in
            let vkPhoto = photoManager.vkPhotos[idx]
            return vkPhoto.isInfoExist ? nil : vkPhoto
        }

        guard !vkPhotosToUpdate.isEmpty else { return }
        photoManager.updatePhotosInfo(vkPhotosToUpdate, { _ in })
    }
}

// MARK: Lifecycle -
extension PhotosGridController {

    override func viewDidLoad() {
        super.viewDidLoad()

        startListen(.vkUserBlocked, self, #selector(onVKUserBlockEvents))
        startListen(.vkUserUnblocked, self, #selector(onVKUserBlockEvents))

        photoManager = createPhotoManager()
        photoManager.onVKPhotosUpdate = onVKPhotosUpdate
        photoManager.onTotalCountUpdate = { [weak self] _ in
            // –≠—Ç–æ –∑–¥–µ—Å—å –ø–æ—Ç–æ–º—É —á—Ç–æ totalCount –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –∞ adjust –¥–ª—è —Ñ–æ—Ç–∫–∏ –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
            // TODO: 1 –∏–∑ 0 –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–∫–∏
            self?.vkPhotoDetailView?.updateTitleCounter()
        }

        guard photoManager.vkPhotos.isEmpty else { return }

        /// –ö–µ–π—Å 1: –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photosGridCollection.footer.startLoading()
        photoManager.getPhotos(count: PHOTOS_PER_PAGE) { [weak self] result in
            guard let this = self else { return }

            switch result {

            case .success(let vkPhotos):
                this.photosGridCollection.footer.hide(withAnim: false)
                this.photosGridCollection.insertPhotos(vkPhotos) { [weak self] in
                    self?.showFooterMessageWithCounter()
                }

            case .failure(let error):
                guard
                    let isRefreshing = self?.photosGridCollection.isRefreshing, !isRefreshing
                    else { return }

                if error == .cancelled {
                    self?.photosGridCollection.footer.stopLoading(Messages.Errors.needToRefreshList)
                    return
                }

                self?.handleError(error)
            }
        }
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        photoManager.cleanupState { [weak self] isNeedToReload in
            if isNeedToReload { self?.updateGridFromState() }
            self?.cleanupSelectedVKPhotos()
        }

        isCanStartSelect = true
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        photosGridCollection.collectionViewLayout.invalidateLayout()
    }
}

extension PhotosGridController: InfinityGridDelegate {
    func onRefresh() {
        /// –ö–µ–π—Å: –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–∏, –Ω–æ –º—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        // TODO!!! –û—Ç–º–µ–Ω–∏—Ç –í–°–ï –∑–∞–ø—Ä–æ—Å—ã: –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Ç–ø
        photoManager.cancelAllRequests { [weak self] in

            self?.photoManager.getPhotos(count: (self?.PHOTOS_PER_PAGE)!) { [weak self] result in
                self?.photosGridCollection.refreshControl?.endRefreshing()

                switch result {
                case .success(let vkPhotos):
                    if let itemsInList = self?.photosGridCollection.vkPhotos, itemsInList.count == 0 {
                        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ—É—Ç–µ—Ä–µ –¥–æ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                        self?.photosGridCollection.footer.hide(withAnim: false)
                    }

                    self?.photosGridCollection.reloadPhotos(with: vkPhotos) { [weak self] in
                        self?.showFooterMessageWithCounter()
                    }

                    self?.cleanupSelectedVKPhotos()

                case .failure(let error):
                    self?.handleError(error)
                }

                self?.photosGridCollection.isScrollEndReached = false // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π!
            }
        }
    }

    func onScrollEndReached() {
        /// –ö–µ–π—Å! –ú—ã –†–ï–§–†–ï–®–ò–ú —Å–ø–∏—Å–æ–∫, –¥–æ–ª–∏—Å—Ç—ã–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–∏
        if (photosGridCollection.refreshControl?.isRefreshing)! {
            /* TODO!! –ù–∞—Ö–æ–¥—è—Å—å –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–±–ª—é–¥–∞—è —Å–ø–∏–Ω–µ—Ä –ø–æ–¥–≥—Ä—É–∑–∫–∏, –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
                      –º—ã –ø–æ–ª—É—á–∏–º –ø—É—Å—Ç–æ–π —Ñ—É—Ç–µ—Ä –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞,
                      –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥ –ø–æ—Ä—Ü–∏–∏. */
            photosGridCollection.isScrollEndReached = false
            return
        }

        /// –ö–µ–π—Å 3: –°–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é
        photosGridCollection.footer.startLoading()
        photoManager.getNextPhotos(count: PHOTOS_PER_PAGE) { [weak self] result in

            switch result {
            case .success(let vkPhotos):
                if vkPhotos.count > 0, let state = self?.photoManager.vkPhotos {
                    self?.photoGallery?.update(vkPhotos, from: state)
                }

                self?.photosGridCollection.footer.hide(withAnim: false)
                self?.photosGridCollection.insertPhotos(vkPhotos) { [weak self] in
                    self?.photosGridCollection.isScrollEndReached = false
                    self?.showFooterMessageWithCounter()
                }

                self?.cleanupSelectedVKPhotos()

            case .failure(let error):
                if error == .cancelled {
                    self?.showFooterMessageWithCounter()
                    self?.photosGridCollection.isScrollEndReached = false
                    return
                }

                var errorMessage = Messages.Errors.failToFetchNewData
                if error == .dataInconsistency {
                    // `isScrollEndReached` —è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —Å—Ç–∞–≤–ª—é –≤ `true` —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    // –¥–∞–ª—å—à–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                    errorMessage = Messages.Errors.dataInconsistency
                    self?.photosGridCollection.isScrollEndReached = true
                } else {
                    Timer.scheduledTimer(withTimeInterval: 1, repeats: false) { [weak self] _ in
                        self?.photosGridCollection.isScrollEndReached = false
                    }
                }

                self?.handleError(error, errorMessage, Messages.Errors.needToReloadData)
            }
        }
    }
}

// MARK: Photos Grid Delegate
extension PhotosGridController: PhotosGridDelegate {

    func tapVKPhoto(inCell cell: PhotosGridCell, atIndex: Int) {
        guard cell.imageView.image != nil else { return }

        vkPhotoDetailView = VKPhotoDetailView.fromNib()
        vkPhotoDetailView!.delegate = self

        photoGallery = SlideLeafViewController.make(
            photos: photoManager.vkPhotos,
            startPageIndex: atIndex,
            fromImageView: cell.imageView,
            photoDetailView: vkPhotoDetailView
        )

        photoGallery!.delegate = self
        photoGallery?.willDisplayPhotoAt = prefetchPhotoInfo

        present(photoGallery!, animated: true) { [weak self] in
            self?.photoGalleryDidOpen()
        }
    }

    func selectVKPhoto(_ vkPhoto: VKPhoto, _ result: ((Bool) -> Void)) {
        guard
            photoManager.vkPhotos.contains(where: { $0 == vkPhoto && !$0.isDeleted })
            else { result(false); return }

        result(selectedVKPhotos.insert(vkPhoto).inserted)
    }

    func deselectVKPhoto(_ vkPhoto: VKPhoto, _ result: ((Bool) -> Void)) {
        result(selectedVKPhotos.remove(vkPhoto) != nil)
    }

    func isVKPhotoSelected(_ vkPhoto: VKPhoto) -> Bool {
        return selectedVKPhotos.contains(vkPhoto)
    }
}

extension PhotosGridController: VKPhotoDetailViewDelegate {
    var vkPhotosTotalCount: Int {
        // –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ –æ—Å—Ç–∞—é—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        return photoManager.totalCount + photoManager.vkPhotos.filter({ $0.isDeleted }).count
    }

    func makeCoverVKPhoto(_ vkPhoto: VKPhoto, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.makeCover(vkPhoto) { result in
            switch result {
            case .success(let isSuccess): completion?((isSuccess, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func moveVKPhoto(_ vkPhoto: VKPhoto, toVKAlbum: VKAlbum, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.movePhoto(vkPhoto, toVKAlbum) { result in
            switch result {
            case .success: completion?((true, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func copyVKPhoto(_ vkPhoto: VKPhoto, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.copyPhoto(vkPhoto) { result in
            switch result {
            case .success: completion?((true, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func editVKPhotoText(_ vkPhoto: VKPhoto, text: String, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.editPhotoCaption(vkPhoto, caption: text) { result in
            switch result {
            case .success(let isEdited): completion?((isEdited, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func tapLikeButton(_ vkPhoto: VKPhoto, completion: ((ActionResult) -> Void)?) {
        // TODO!! –ú—ã –Ω–µ –∞–¥–∂–∞—Å—Ç–∏–º —Ñ–æ—Ç–∫—É –ø–æ—Å–ª–µ –ª–∞–π–∫–∞ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º:
        // 1) –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ñ–æ—Ç–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞
        // 2) –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –ª–∞–π–∫ –∏–º–µ–µ—Ç –¥–µ–±–∞—É–Ω—Å, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–∞–ª–µ—Ä–µ–∏ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        //    –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–µ—Ä—è—Ç—å –∑—É–º, —Ñ—Ä–∏–∑–∏—Ç—å—Å—è –ø—Ä–∏ —Å–ª–∞–π–¥–µ –∏ —Ç.–¥.

        if vkPhoto.isLiked {
            // –≠—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–æ—Ç–∫–∞ –∏–∑ VKPhotoDetailView –ø—Ä–∏–µ—Ö–∞–ª–∞ –ª–∞–π–∫–Ω—É—Ç–æ–π, –Ω–æ –Ω–∞ –¥–µ–ª–µ –µ–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ª–∞–π–∫–Ω—É—Ç—å
            photoManager.likePhoto(vkPhoto) { result in
                switch result {
                case .success: completion?((true, false))
                case .failure(let error): completion?((false, error == .cancelled))
                }
            }
        } else {
            photoManager.dislikePhoto(vkPhoto) { result in
                switch result {
                case .success: completion?((true, false))
                case .failure(let error): completion?((false, error == .cancelled))
                }
            }
        }
    }

    func deleteVKPhoto(_ vkPhoto: VKPhoto, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.deletePhoto(vkPhoto) { result in
            switch result {
            case .success(let isDeleted): completion?((isDeleted, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func tapRestoreButton(_ vkPhoto: VKPhoto, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.restorePhoto(vkPhoto) { result in
            switch result {
            case .success(let isRestored): completion?((isRestored, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func reportVKPhoto(_ vkPhoto: VKPhoto, _ reason: VKPhotoReportReason, completion: ((ActionResult) -> Void)?) -> AsyncOperation? {
        return photoManager.reportAndDislike(vkPhoto, reason) { result in
            switch result {
            case .success(let isReported): completion?((isReported, false))
            case .failure(let error): completion?((false, error == .cancelled))
            }
        }
    }

    func tapCancelOperation(_ operation: AsyncOperation) {
        operation.cancel()
    }
}

// MARK: Gallery -
extension PhotosGridController: SlideLeafViewControllerDelegate {
    func longPressImageView(slideLeafViewController: SlideLeafViewController, photo: VKPhoto, pageIndex: Int) {}

    func photoDidDisplayed(atIndex index: Int) {
        guard index < photosGridCollection.vkPhotos.count else { return }
        let indexPath = IndexPath(item: index, section: 0)
        photosGridCollection.scrollToItem(at: indexPath, at: .centeredVertically, animated: false)
    }

    func browserDismissed(photo: VKPhoto, pageIndex: Int) {
        photoGalleryDidClosed()
    }
}

// MARK: Multi Edit -
extension PhotosGridController: EditablePhotosList {
    // TODO –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç objc
    @objc var isMoveButtonEnabled: Bool {
        return !selectedVKPhotos.isEmpty && !selectedVKPhotos.contains(where: { !$0.isCurrentUserOwner || $0.isDeleted })
    }

    var isDeleteButtonEnabled: Bool {
        return !selectedVKPhotos.isEmpty && !selectedVKPhotos.contains(where: { !$0.isCurrentUserOwner || $0.isDeleted })
    }

    func onDeleteButtonTap() {
        multipleDelete()
    }

    func onMoveButtonTap() {
        multipleMove()
    }
}
